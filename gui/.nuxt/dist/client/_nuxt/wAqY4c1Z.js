import{ar as a}from"./CQMx3IcQ.js";import{C as n}from"./rbhE-3Vg.js";const s=a("containers",{state:()=>({containers:[],container:null}),getters:{runningContainers(){return this.containers.filter(t=>t.getStatus()==="running")},stoppedContainers(){return console.log("Stopped containers:",this.containers.filter(t=>t.getStatus()==="stopped")),this.containers.filter(t=>t.getStatus()==="stopped")}},actions:{findByName(t){return this.containers.find(e=>e.getName()===t)},async loadContainers(){{const t=localStorage.getItem("containers");if(t){const e=JSON.parse(t);this.containers=e.map(r=>new n(r))}else try{this.containers=await n.all(),localStorage.setItem("containers",JSON.stringify(this.containers))}catch(e){console.error("Failed to load containers:",e)}}},async fetchContainer(t){this.loading=!0;try{this.container=await n.fetchContainer(t)}catch(e){console.error("Failed to load container details:",e)}finally{this.loading=!1}},async reloadContainers(){try{this.containers=await n.all(),localStorage.setItem("containers",JSON.stringify(this.containers))}catch(t){console.error("Failed to reload containers:",t)}},async performContainerAction(t,e){try{await t[e](),await this.loadContainers()}catch(r){console.error(`Failed to ${e} container:`,r)}}}});export{s as u};
