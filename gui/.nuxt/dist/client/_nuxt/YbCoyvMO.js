import{ar as d}from"./CQMx3IcQ.js";import{D as e,P as i}from"./Bg4kDvc2.js";const g=d("databases",{state:()=>({databases:[],database:null}),getters:{mysqlDatabases(){return this.databases.filter(a=>a.getType()==="mysql")},postgresDatabases(){return this.databases.filter(a=>a.getType()==="postgres")}},actions:{findByName(a){return this.databases.find(t=>t.getName()===a)},async loadDatabases(){{const a=localStorage.getItem("databases"),t=localStorage.getItem("projects");if(a){const s=JSON.parse(a);this.databases=s.map(l=>{const r=new e(l);return t&&JSON.parse(t).map(o=>{o.database&&o.database.name===r.getName()&&o.database.type===r.getType().label&&r.setProject(new i(o))}),r})}else try{const[s,l]=await Promise.all([e.all("mysql"),e.all("postgres")]);this.databases=[...s,...l],localStorage.setItem("databases",JSON.stringify(this.databases))}catch(s){console.error("Failed to load databases:",s)}}},async fetchDatabase(a,t){this.loading=!0;try{this.databases.length||await this.loadDatabases(),this.database=this.databases.find(s=>s.getTypeUrl()===a&&s.getName()===t)}catch(s){console.error("Failed to load database details:",s)}finally{this.loading=!1}},async reloadDatabases(){try{const[a,t]=await Promise.all([e.all("mysql"),e.all("postgres")]);this.databases=[...a,...t],localStorage.setItem("databases",JSON.stringify(this.databases))}catch(a){console.error("Failed to reload databases:",a)}},async performDatabaseAction(a,t){try{await a[t](),await this.loadDatabases()}catch(s){console.error(`Failed to ${t} database:`,s)}}}});export{g as u};
