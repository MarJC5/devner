{"version":3,"file":"index-lwer3w52.js","sources":["../../../../pages/other-containers/index.vue"],"sourcesContent":["<template>\n  <UPageHeader\n    title=\"Other Containers\"\n    class=\"sticky top-0 bg-white z-10 dark:bg-gray-800 mb-4 pb-4\"\n  />\n\n  <UAccordion\n    multiple\n    color=\"white\"\n    variant=\"solid\"\n    size=\"lg\"\n    :items=\"containers\"\n    v-if=\"containers.length\"\n  >\n    <template #item=\"{ item }\">\n      <UPageGrid class=\"py-4\">\n      <UCard v-for=\"container in item.containers\" :key=\"container.getId()\">\n        <template #header>\n          {{ container.getName() }} -\n          <UBadge\n            :label=\"container.getStatus()\"\n            :color=\"container.isRunning() ? 'green' : 'red'\"\n            variant=\"soft\"\n          />\n        </template>\n\n        <div class=\"flex flex-wrap gap-2\">\n          <UButton\n            @click=\"() => performContainerAction(container, 'start')\"\n            v-if=\"!container.isRunning()\"\n            :icon=\"\n              container.isLoading('start')\n                ? 'i-heroicons-spinner'\n                : 'i-heroicons-play'\n            \"\n            size=\"sm\"\n            color=\"white\"\n            square\n            variant=\"solid\"\n            :loading=\"container.isLoading('start')\"\n            label=\"Start\"\n          />\n          <UButton\n            @click=\"() => performContainerAction(container, 'restart')\"\n            v-if=\"container.isRunning()\"\n            :icon=\"\n              container.isLoading('restart')\n                ? 'i-heroicons-spinner'\n                : 'i-heroicons-arrow-path'\n            \"\n            size=\"sm\"\n            color=\"white\"\n            square\n            variant=\"solid\"\n            :loading=\"container.isLoading('restart')\"\n            label=\"Restart\"\n          />\n          <UButton\n            @click=\"() => performContainerAction(container, 'stop')\"\n            v-if=\"container.isRunning()\"\n            :icon=\"\n              container.isLoading('stop')\n                ? 'i-heroicons-spinner'\n                : 'i-heroicons-stop'\n            \"\n            size=\"sm\"\n            color=\"white\"\n            square\n            variant=\"solid\"\n            :loading=\"container.isLoading('stop')\"\n            label=\"Stop\"\n          />\n          <UButton\n            @click=\"() => performContainerAction(container, 'remove')\"\n            :icon=\"\n              container.isLoading('remove')\n                ? 'i-heroicons-spinner'\n                : 'i-heroicons-trash'\n            \"\n            size=\"sm\"\n            color=\"white\"\n            square\n            variant=\"solid\"\n            :loading=\"container.isLoading('remove')\"\n            label=\"Remove\"\n          />\n          <UButton\n            @click=\"() => performContainerAction(container, 'rebuild')\"\n            :icon=\"\n              container.isLoading('rebuild')\n                ? 'i-heroicons-spinner'\n                : 'i-heroicons-arrow-path-rounded-square'\n            \"\n            size=\"sm\"\n            color=\"white\"\n            square\n            variant=\"solid\"\n            :loading=\"container.isLoading('rebuild')\"\n            label=\"Rebuild\"\n          />\n          <UButton\n            :to=\"`/containers/${container.getId()}`\"\n            icon=\"i-heroicons-eye\"\n            size=\"sm\"\n            color=\"white\"\n            square\n            variant=\"solid\"\n            label=\"Details\"\n          />\n        </div>\n      </UCard>\n      </UPageGrid>\n    </template>\n  </UAccordion>\n  <div v-else>\n    <UButton size=\"xl\" color=\"white\" square block variant=\"ghost\" loading>\n      Loading containers...\n    </UButton>\n  </div>\n</template>\n\n<script setup>\nimport { ref, onMounted } from \"vue\";\nimport Container from \"@/models/Container\";\n\nconst containers = ref([]);\n\nconst loadContainers = async () => {\n  try {\n    containers.value = await Container.allOthers();\n    console.log(\"Loaded containers:\", containers.value);\n  } catch (error) {\n    console.error(\"Failed to load containers:\", error);\n  }\n};\n\nconst performContainerAction = async (container, action) => {\n  try {\n    await container[action]();\n    loadContainers();\n  } catch (error) {\n    console.error(`Failed to ${action} container:`, error);\n  }\n};\n\nonMounted(loadContainers);\n\n// Watch and update the containers ref\nwatch(containers, (newContainers) => {\n  containers.value = newContainers;\n});\n</script>\n"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6HA,UAAM,aAAa,IAAI,CAAA,CAAE;AAEzB,UAAM,iBAAiB,YAAY;AACjC,UAAI;AACF,mBAAW,QAAQ,MAAM,UAAU,UAAS;AAC5C,gBAAQ,IAAI,sBAAsB,WAAW,KAAK;AAAA,MACnD,SAAQ,OAAO;AACd,gBAAQ,MAAM,8BAA8B,KAAK;AAAA,MAClD;AAAA,IACH;AAEA,UAAM,yBAAyB,OAAO,WAAW,WAAW;AAC1D,UAAI;AACF,cAAM,UAAU,MAAM;AACtB;MACD,SAAQ,OAAO;AACd,gBAAQ,MAAM,aAAa,MAAM,eAAe,KAAK;AAAA,MACtD;AAAA,IACH;AAKA,UAAM,YAAY,CAAC,kBAAkB;AACnC,iBAAW,QAAQ;AAAA,IACrB,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"}