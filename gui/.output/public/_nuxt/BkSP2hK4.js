import{C as o}from"./4u0pgEpR.js";class d{constructor(e){this.name=e.name,this.type=e.type,this.port=e.port,this.host=e.host,this.containerName=e.containerName,this.tables=e.tables||[],this.loading={create:!1,delete:!1}}static async all(e){try{const a=await o.fetchContainerByName(`${e}_devner`),s=this.findType(a.name).label;let t;return s==="MySQL"?(t=await a.cmd('mysql --defaults-file=/.my.cnf -e "SHOW DATABASES;"',!0,!1),t=t.map(r=>r.Database.replace(/[^\x20-\x7E]/g,"").trim()).filter(r=>!["information_schema","performance_schema","mysql","sys",""].includes(r))):(t=await a.cmd('psql -U devner -c "\\l"',!0,!1),t=this.parsePostgresOutput(t).map(c=>c.Name).filter(c=>!["postgres","template0","template1","devner"].includes(c))),await this.identifyDatabase(a,t,e)}catch(a){return console.error("Error fetching databases:",a),[]}}static parsePostgresOutput(e){const a=["Name","Owner","Encoding","Collate","Ctype","Access privileges"],s=[];let t={},r=!1,c=!1;return e.forEach(i=>{const n=i["List of databases"];if(!r){n.includes("Name")&&n.includes("Owner")&&(r=!0);return}if(!c&&/^-+\+-+\+-+\+-+\+-+\+-+$/.test(n)){c=!0;return}if(n.includes("rows)"))return;const f=n.split("|").map(l=>l.trim());f.length===a.length?(Object.keys(t).length>0&&s.push(t),t={},a.forEach((l,y)=>{t[l]=f[y]})):a.forEach((l,y)=>{f[y]&&(t[l]=(t[l]||"")+" "+f[y])})}),Object.keys(t).length>0&&s.push(t),s.filter(i=>i.Name&&i.Name!=="")}static async fetchDatabase(e,a){return(await this.all(e)).find(t=>t.getName()===a)}getName(){return this.name}getContainerName(){return this.containerName}getType(){return this.type.includes("PostgreSQL")?{label:"PostgreSQL",color:"cyan"}:{label:"MySQL",color:"orange"}}static findType(e){return e.includes("postgres")?{label:"PostgreSQL",color:"cyan"}:{label:"MySQL",color:"orange"}}static async identifyDatabase(e,a,s){try{return await Promise.all(a.map(async r=>{const c=this.findType(`${s}_devner`).label;let i;return c==="MySQL"?(i=await e.cmd(`mysql --defaults-file=/.my.cnf -e "SHOW TABLES;" ${r};`),i.shift()):(i=await e.cmd(`psql -U devner -d ${r} -c "\\dt"`),i=i.map(n=>n["List of databases"]).map(n=>n.trim()).filter(n=>n).slice(3,-1).map(n=>n.split("|")[1].trim())),new d({name:r,type:c,port:e.getPorts(!1)[0],host:s,containerName:`${s}`,tables:i})}))}catch(t){return console.error("Error identifying databases:",t),[]}}async inspectTable(e){const a=await o.fetchContainerByName(this.containerName),s=this.getType().label;let t;return s==="MySQL"?t=await a.cmd(`mysql --defaults-file=/.my.cnf -e "DESCRIBE ${e}" ${this.name};`,!0,!1):t=await a.cmd(`psql -U devner -d ${this.name} -c "\\d ${e}"`,!0,!1),t}static async createDatabase(e,a){try{const s=await o.fetchContainerByName(`${e}_devner`);return this.findType(s.name).label==="MySQL"?await s.cmd(`mysql --defaults-file=/.my.cnf -e "CREATE DATABASE ${a};"`):await s.cmd(`psql -U devner -c "CREATE DATABASE ${a};"`),await this.all(e)}catch(s){return console.error("Error creating database:",s),[]}}static async deleteDatabase(e,a){try{const s=await o.fetchContainerByName(`${e}_devner`);return this.findType(s.name).label==="MySQL"?await s.cmd(`mysql --defaults-file=/.my.cnf -e "DROP DATABASE ${a};"`):await s.cmd(`psql -U devner -c "DROP DATABASE ${a};"`),await this.all(e)}catch(s){return console.error("Error deleting database:",s),[]}}async createTable(e,a){const s=await o.fetchContainerByName(this.containerName),t=this.getType().label;try{return t==="MySQL"?await s.cmd(`mysql --defaults-file=/.my.cnf -e "CREATE TABLE ${this.name}.${e} (${a});"`):await s.cmd(`psql -U devner -d ${this.name} -c "CREATE TABLE ${e} (${a});"`),await this.inspectTable(e)}catch(r){return console.error("Error creating table:",r),[]}}async deleteTable(e){const a=await o.fetchContainerByName(this.containerName),s=this.getType().label;try{return s==="MySQL"?await a.cmd(`mysql --defaults-file=/.my.cnf -e "DROP TABLE ${this.name}.${e};"`):await a.cmd(`psql -U devner -d ${this.name} -c "DROP TABLE ${e};"`),await this.inspectTable(e)}catch(t){return console.error("Error deleting table:",t),[]}}}export{d as D};
