{"version":3,"file":"_name_-BPaDO-kv.js","sources":["../../../../pages/projects/[name].vue"],"sourcesContent":["<template>\n    <UPageHeader\n      :headline=\"project ? '' : 'Loading...'\"\n      class=\"sticky top-0 bg-white z-10 dark:bg-gray-800 mb-4 pb-4\"\n    >\n      <template #title>\n          <h1 v-if=\"project\" class=\"flex\">{{ project.getName() }}\n          <UBadge \n            :label=\"project.getType().label\"\n            :color=\"project.getType().color\"\n            class=\"ml-2 h-6\"\n            variant=\"soft\"/>\n          </h1>\n      </template>\n      <template #description>\n        <div class=\"flex flex-wrap gap-4\" v-if=\"project\">\n          \n        </div>\n      </template>\n    </UPageHeader>\n    <div v-if=\"project\">\n    </div>\n    <div v-else>\n      <UButton \n        size=\"xl\"\n        color=\"white\"\n        square\n        block\n        variant=\"ghost\"\n        loading>\n          Loading project...\n      </UButton>\n    </div>\n  </template>\n  \n  <script setup>\n  import Project from \"@/models/Project\";\n  \n  const route = useRoute();\n  const project = ref(null);\n  \n  const loadProject = async () => {\n    try {\n        project.value = await Project.fetchProject(route.params.name);\n    } catch (error) {\n      console.error(\"Failed to load project details:\", error);\n    }\n  };\n  \n  const performProjectAction = async (project, action) => {\n    try {\n      await project[action]();\n      loadProject();\n    } catch (error) {\n      console.error(`Failed to ${action} project:`, error);\n    }\n  };\n  \n  onMounted(loadProject);\n  \n  // Watch and update the containers ref\n  watch(project, (newProject) => {\n    project.value = newProject;\n  });\n  </script>\n  "],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAsCgB,aAAW;AACzB,UAAM,UAAU,IAAI,IAAI;AAsBxB,UAAM,SAAS,CAAC,eAAe;AAC7B,cAAQ,QAAQ;AAAA,IACpB,CAAG;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"}