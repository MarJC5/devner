import{C as d}from"./rbhE-3Vg.js";class p{constructor(e){this.name=e.name,this.type=e.type,this.port=e.port,this.host=e.host,this.containerName=e.containerName,this.tables=e.tables||[],this.project=e.project||null,this.loading={project:!1,create:!1,delete:!1}}static async all(e){try{const t=await d.fetchContainerByName(`${e}_devner`),s=this.findType(t.name).label;let a;return s==="MySQL"?(a=await t.cmd('mysql --defaults-file=/.my.cnf -e "SHOW DATABASES;"',!0,!1),a=a.map(r=>r.Database.replace(/[^\x20-\x7E]/g,"").trim()).filter(r=>!["information_schema","performance_schema","mysql","sys",""].includes(r))):(a=await t.cmd('psql -U devner -c "\\l"',!0,!1),a=this.parsePostgresOutput(a).map(c=>c.Name).filter(c=>!["postgres","template0","template1","devner"].includes(c))),await this.identifyDatabase(t,a,e)}catch(t){return console.error("Error fetching databases:",t),[]}}static parsePostgresOutput(e){const t=["Name","Owner","Encoding","Collate","Ctype","Access privileges"],s=[];let a={},r=!1,c=!1;return e.forEach(n=>{const i=n["List of databases"];if(!r){i.includes("Name")&&i.includes("Owner")&&(r=!0);return}if(!c&&/^-+\+-+\+-+\+-+\+-+\+-+$/.test(i)){c=!0;return}if(i.includes("rows)"))return;const l=i.split("|").map(o=>o.trim());l.length===t.length?(Object.keys(a).length>0&&s.push(a),a={},t.forEach((o,h)=>{a[o]=l[h]})):t.forEach((o,h)=>{l[h]&&(a[o]=(a[o]||"")+" "+l[h])})}),Object.keys(a).length>0&&s.push(a),s.filter(n=>n.Name&&n.Name!=="")}static async fetchDatabase(e,t){return(await this.all(e)).find(a=>a.getName()===t)}getName(){return this.name}getContainerName(){return this.containerName}getType(){return this.type.includes("PostgreSQL")?{label:"PostgreSQL",color:"cyan"}:{label:"MySQL",color:"orange"}}getTypeUrl(){return this.type.includes("PostgreSQL")?"postgres":"mysql"}getProject(){return this.project}setProject(e){this.project=e}static findType(e){return e.includes("postgres")?{label:"PostgreSQL",color:"cyan"}:{label:"MySQL",color:"orange"}}static async identifyDatabase(e,t,s){try{return await Promise.all(t.map(async r=>{const c=this.findType(`${s}_devner`).label;let n;return c==="MySQL"?(n=await e.cmd(`mysql --defaults-file=/.my.cnf -e "SHOW TABLES;" ${r};`),n.shift()):(n=await e.cmd(`psql -U devner -d ${r} -c "\\dt"`),n=n.map(i=>i["List of databases"]).map(i=>i.trim()).filter(i=>i).slice(3,-1).map(i=>i.split("|")[1].trim())),new p({name:r,type:c,port:e.getPorts(!1)[0],host:s,containerName:`${s}`,tables:n})}))}catch(a){return console.error("Error identifying databases:",a),[]}}async inspectTable(e){const t=await d.fetchContainerByName(this.containerName),s=this.getType().label;let a;return s==="MySQL"?a=await t.cmd(`mysql --defaults-file=/.my.cnf -e "DESCRIBE ${e}" ${this.name};`,!0,!1):a=await t.cmd(`psql -U devner -d ${this.name} -c "\\d ${e}"`,!0,!1),a}static async createDatabase(e,t){try{const s=await d.fetchContainerByName(`${e}_devner`);return this.findType(s.name).label==="MySQL"?await s.cmd(`mysql --defaults-file=/.my.cnf -e "CREATE DATABASE ${t};"`):await s.cmd(`psql -U devner -c "CREATE DATABASE ${t};"`),await this.all(e)}catch(s){return console.error("Error creating database:",s),[]}}static async deleteDatabase(e,t){try{const s=await d.fetchContainerByName(`${e}_devner`);return this.findType(s.name).label==="MySQL"?await s.cmd(`mysql --defaults-file=/.my.cnf -e "DROP DATABASE ${t};"`):await s.cmd(`psql -U devner -c "DROP DATABASE ${t};"`),await this.all(e)}catch(s){return console.error("Error deleting database:",s),[]}}async createTable(e,t){const s=await d.fetchContainerByName(this.containerName),a=this.getType().label;try{return a==="MySQL"?await s.cmd(`mysql --defaults-file=/.my.cnf -e "CREATE TABLE ${this.name}.${e} (${t});"`):await s.cmd(`psql -U devner -d ${this.name} -c "CREATE TABLE ${e} (${t});"`),await this.inspectTable(e)}catch(r){return console.error("Error creating table:",r),[]}}async deleteTable(e){const t=await d.fetchContainerByName(this.containerName),s=this.getType().label;try{return s==="MySQL"?await t.cmd(`mysql --defaults-file=/.my.cnf -e "DROP TABLE ${this.name}.${e};"`):await t.cmd(`psql -U devner -d ${this.name} -c "DROP TABLE ${e};"`),await this.inspectTable(e)}catch(a){return console.error("Error deleting table:",a),[]}}isLoading(e){return this.loading[e]}}class f{constructor(e){this.name=e.name,this.path=e.path,this.type=e.type,this.directories=e.directories||[],this.database=e.database||null,this.loading={create:!1,delete:!1,code:!1}}static async all(){const t=await(await d.fetchContainerByName("frankenphp_devner")).cmd("ls -a /var/www/html/*/");return this.groupProjects(t)}static async fetchProject(e){const s=await(await d.fetchContainerByName("frankenphp_devner")).cmd(`ls -a /var/www/html/${e}/`);return this.groupProject(e,s)||null}async performAction(e,t={}){this.loading[e]=!0,console.log(`Performing action ${e} on project with name: ${this.name}`),await $fetch(`/api/projects/${this.name}/${e}`,{method:"POST",body:t}),this.loading[e]=!1}async code(){await this.performAction("code")}async delete(){await this.performAction("delete")}async create(e,t){await this.performAction("create",{name:e,type:t})}getName(){return this.name}getPath(){return this.path}getType(){return this.type}getDatabase(){return this.database}setDatabase(e){this.database=e}static async groupProjects(e){const t={},s=[];let a="";e.forEach(r=>{r.endsWith(":")?(a=r.replace(":",""),a=a.replace("/var/www/html/",""),a=a.replace("/",""),t[a]=[]):a&&t[a].push(r)});for(const r in t){if(r==="."||r===".."||r==="gui"||r==="app")continue;const[c,n]=await Promise.all([p.all("mysql"),p.all("postgres")]),i=[...c,...n].sort((l,o)=>l.getName().localeCompare(o.getName()));s.push(new f({name:r,path:`/var/www/html/${r}`,type:this.identifyProject(t[r]),directories:t[r],database:i.find(l=>l.getName()===r)||null}))}return s}static async groupProject(e,t){const s=t.map(n=>n.trim());if(s.length===0)return null;const[a,r]=await Promise.all([p.all("mysql"),p.all("postgres")]),c=[...a,...r].sort((n,i)=>n.getName().localeCompare(i.getName()));return new f({name:e,path:`/var/www/html/${e}`,type:this.identifyProject(s),directories:s,database:c.find(n=>n.getName()===e)||null})}static identifyProject(e){return e.includes("artisan")?{label:"Laravel",color:"red"}:e.includes("wp-config.php")?{label:"WordPress",color:"blue"}:e.includes("package.json")?{label:"Node.js",color:"green"}:{label:"Unknown",color:"gray"}}isLoading(e){return this.loading[e]}}export{p as D,f as P};
