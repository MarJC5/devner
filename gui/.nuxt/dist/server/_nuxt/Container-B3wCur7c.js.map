{"version":3,"file":"Container-B3wCur7c.js","sources":["../../../../node_modules/@nuxt/ui/dist/runtime/ui.config/layout/card.mjs","../../../../node_modules/@nuxt/ui-pro/components/page/PageGrid.vue","../../../../node_modules/@nuxt/ui/dist/runtime/components/layout/Card.vue","../../../../models/Container.js"],"sourcesContent":["export default {\n  base: \"\",\n  background: \"bg-white dark:bg-gray-900\",\n  divide: \"divide-y divide-gray-200 dark:divide-gray-800\",\n  ring: \"ring-1 ring-gray-200 dark:ring-gray-800\",\n  rounded: \"rounded-lg\",\n  shadow: \"shadow\",\n  body: {\n    base: \"\",\n    background: \"\",\n    padding: \"px-4 py-5 sm:p-6\"\n  },\n  header: {\n    base: \"\",\n    background: \"\",\n    padding: \"px-4 py-5 sm:px-6\"\n  },\n  footer: {\n    base: \"\",\n    background: \"\",\n    padding: \"px-4 py-4 sm:px-6\"\n  }\n};\n","<template>\n  <div :class=\"ui.wrapper\" v-bind=\"attrs\">\n    <slot />\n  </div>\n</template>\n\n<script setup lang=\"ts\">\nimport type { PropType } from 'vue'\n\nconst config = {\n  wrapper: 'grid grid-cols-1 sm:grid-cols-2 xl:grid-cols-3 gap-8'\n}\n\ndefineOptions({\n  inheritAttrs: false\n})\n\nconst props = defineProps({\n  class: {\n    type: [String, Object, Array] as PropType<any>,\n    default: undefined\n  },\n  ui: {\n    type: Object as PropType<Partial<typeof config>>,\n    default: () => ({})\n  }\n})\n\nconst { ui, attrs } = useUI('page.grid', toRef(props, 'ui'), config, toRef(props, 'class'), true)\n</script>\n","<template>\n  <component\n    :is=\"$attrs.onSubmit ? 'form' : as\"\n    :class=\"cardClass\"\n    v-bind=\"attrs\"\n  >\n    <div v-if=\"$slots.header\" :class=\"[ui.header.base, ui.header.padding, ui.header.background]\">\n      <slot name=\"header\" />\n    </div>\n    <div v-if=\"$slots.default\" :class=\"[ui.body.base, ui.body.padding, ui.body.background]\">\n      <slot />\n    </div>\n    <div v-if=\"$slots.footer\" :class=\"[ui.footer.base, ui.footer.padding, ui.footer.background]\">\n      <slot name=\"footer\" />\n    </div>\n  </component>\n</template>\n\n<script>\nimport { computed, toRef, defineComponent } from \"vue\";\nimport { twMerge, twJoin } from \"tailwind-merge\";\nimport { useUI } from \"../../composables/useUI\";\nimport { mergeConfig } from \"../../utils\";\nimport appConfig from \"#build/app.config\";\nimport { card } from \"#ui/ui.config\";\nconst config = mergeConfig(appConfig.ui.strategy, appConfig.ui.card, card);\nexport default defineComponent({\n  inheritAttrs: false,\n  props: {\n    as: {\n      type: String,\n      default: \"div\"\n    },\n    class: {\n      type: [String, Object, Array],\n      default: () => \"\"\n    },\n    ui: {\n      type: Object,\n      default: () => ({})\n    }\n  },\n  setup(props) {\n    const { ui, attrs } = useUI(\"card\", toRef(props, \"ui\"), config);\n    const cardClass = computed(() => {\n      return twMerge(twJoin(\n        ui.value.base,\n        ui.value.rounded,\n        ui.value.divide,\n        ui.value.ring,\n        ui.value.shadow,\n        ui.value.background\n      ), props.class);\n    });\n    return {\n      // eslint-disable-next-line vue/no-dupe-keys\n      ui,\n      attrs,\n      cardClass\n    };\n  }\n});\n</script>\n","import stripAnsi from 'strip-ansi';\n\nclass Container {\n  constructor(containerData) {\n    this.id = containerData.Id || 0;\n    this.created = containerData.Created || \"\";\n    this.name = containerData.Name || \"\";\n    this.status = containerData.State.Status || \"\";\n    this.pid = containerData.State.Pid || 0;\n    this.startedAt = containerData.State.StartedAt || \"\";\n    this.image = containerData.Image || \"\";\n    this.ports = containerData.NetworkSettings.Ports || {};\n    this.labels = containerData.Config.Labels || {};\n    this.network = containerData.NetworkSettings.Networks || {};\n    this.project = this.labels[\"com.docker.compose.project\"] || \"\";\n\n    // Loading state for actions\n    this.loading = {\n      start: false,\n      restart: false,\n      stop: false,\n      remove: false,\n      rebuild: false,\n    };\n  }\n\n  static async logs(id, options = {}) {\n    const logStream = await $fetch(`/api/containers/${id}/logs`, {\n      method: \"POST\",\n      body: JSON.stringify(options),\n      headers: { \"Content-Type\": \"application/json\" },\n    });\n\n    logStream.on(\"data\", (chunk) => {\n      return chunk.toString('utf8');\n    });\n\n    logStream.on(\"end\", () => {\n      console.log(\"Stream ended\");\n    });\n\n    logStream.on(\"error\", (error) => {\n      console.error(\"Stream error:\", error);\n    });\n  }\n\n  static async fetchContainer(id) {\n    const containerData = await $fetch(`/api/containers/${id}/details`, {\n      method: \"GET\",\n    });\n    return new Container(containerData);\n  }\n\n  static async fetchContainerByName(containerName) {\n    try {\n      const containers = await Container.all();\n      return containers.find((container) =>\n        container.name.includes(`/${containerName}`)\n      );\n    } catch (error) {\n      console.error(\"Error fetching container by name:\", error);\n      throw error;\n    }\n  }\n\n  static async all() {\n    const data = await $fetch(`/api/containers`, { method: \"GET\" });\n    const containers = await Promise.all(\n      data.map(async (containerData) => {\n        const model = await Container.fetchContainer(containerData.Id);\n        if (\n          model.getNetworks().devner &&\n          !model.getName().toLowerCase().includes(\"gui\")\n        ) {\n          return model;\n        }\n      })\n    ).then((results) => results.filter((container) => container !== undefined));\n\n    return containers;\n  }\n\n  static async allOthers() {\n    const data = await $fetch(`/api/containers`, { method: \"GET\" });\n    const containers = await Promise.all(\n      data.map(async (containerData) => {\n        const model = await Container.fetchContainer(containerData.Id);\n        if (!model.getNetworks().devner) {\n          return model;\n        }\n      })\n    ).then((results) => results.filter((container) => container !== undefined));\n  \n    // Group the containers by project name\n    const groupedContainers = containers.reduce((acc, container) => {\n      const project = container.project;\n      if (!acc[project]) {\n        acc[project] = [];\n      }\n      acc[project].push(container);\n      return acc;\n    }, {});\n  \n    // Transform the grouped containers into the desired format\n    const formattedContainers = Object.entries(groupedContainers).map(([label, containers]) => ({\n      label: label.charAt(0).toUpperCase() + label.slice(1),\n      icon: \"i-heroicons-cube-transparent\",\n      containers,\n    }));\n  \n    return formattedContainers;\n  }  \n\n  formatDate(isoString) {\n    const date = new Date(isoString);\n    return date.toLocaleString();\n  }\n\n  /**\n   * Perform an action on the container\n   *\n   * @param {string} action\n   */\n\n  async performAction(action) {\n    this.loading[action] = true;\n    console.log(`Performing action ${action} on container with ID: ${this.id}`);\n    await $fetch(`/api/containers/${this.id}/${action}`, { method: \"POST\" });\n    this.loading[action] = false;\n    await this.updateStatus();\n  }\n\n  async start() {\n    await this.performAction(\"start\");\n  }\n\n  async restart() {\n    await this.performAction(\"restart\");\n  }\n\n  async stop() {\n    await this.performAction(\"stop\");\n  }\n\n  async remove() {\n    await this.performAction(\"remove\");\n  }\n\n  async rebuild() {\n    await this.performAction(\"rebuild\");\n  }\n\n  async updateStatus() {\n    const updatedContainer = await Container.fetchContainer(this.id);\n    this.status = updatedContainer.status;\n    this.pid = updatedContainer.pid;\n    this.startedAt = updatedContainer.startedAt;\n  }\n\n  /**\n   * Exec a command in the container\n   */\n  async cmd(command, parseAsTable = false, clean = true) {\n    try {\n      const response = await $fetch(`/api/containers/${this.id}/exec`, {\n        method: \"POST\",\n        body: JSON.stringify({ command }),\n        headers: { \"Content-Type\": \"application/json\" },\n      });\n\n      if (response.status === \"error\") {\n        throw new Error(response.message);\n      }\n\n      // Split the raw output into lines\n      const rawOutput = response.stdout.split(\"\\n\");\n\n      // If parsing as table, handle the parsing\n      if (parseAsTable) {\n        return this.parseTableOutput(rawOutput);\n      }\n\n      // Clean up the output by removing non-printable characters if 'clean' is true\n      if (clean) {\n        return rawOutput\n          .map((line) => stripAnsi(line).replace(/[^\\x20-\\x7E]/g, ''))\n          .filter((line) => line);\n      }\n\n      return rawOutput;\n    } catch (error) {\n      console.error(\"Error executing command in container:\", error);\n      throw error;\n    }\n  }\n\n  parseTableOutput(output) {\n    const [header, ...rows] = output;\n\n    // Split header into columns\n    const headers = header.split(\"\\t\").map((h) => h.trim());\n\n    return rows.map((row) => {\n      const columns = row.split(\"\\t\").map((c) => c.trim()); // Split by tab characters and trim\n      let rowObject = {};\n      headers.forEach((header, index) => {\n        rowObject[stripAnsi(header).replace(/[^\\x20-\\x7E]/g, '')] = columns[index] || \"\";\n      });\n      return rowObject;\n    });\n  }\n\n  /**\n   * Get Directories\n   */\n  async getDirectories(path = \"/\") {\n    const filesAndDirs = await this.cmd(`ls -a ${path}`);\n    return { filesAndDirs, path, count: filesAndDirs.length };\n  }\n\n  /**\n   * Get id of the container\n   *\n   * @returns {string}\n   */\n  getId() {\n    return this.id;\n  }\n\n  /**\n   * Get creation date of the container\n   *\n   * @returns {string}\n   */\n  getCreated() {\n    return this.formatDate(this.created);\n  }\n\n  /**\n   * Get name of the container\n   *\n   * @returns {string}\n   */\n  getName() {\n    let friendlyName = this.name\n      .replace(\"/\", \"\")\n      .replace(/[-_]/g, \" \")\n      .replace(/\\b\\w/g, (c) => c.toUpperCase());\n    friendlyName = friendlyName.replace(/ Devner$/, \"\");\n    return friendlyName;\n  }\n\n  /**\n   * Get status of the container\n   *\n   * @returns {string}\n   */\n  getStatus(format = \"capitalize\") {\n    if (format === \"capitalize\") {\n      return this.status.charAt(0).toUpperCase() + this.status.slice(1);\n    }\n    return this.status;\n  }\n\n  /**\n   * Get image of the container\n   *\n   * @returns {string}\n   */\n  getImage() {\n    return this.image;\n  }\n\n  /**\n   * Get ports of the container\n   *\n   * @returns {object}\n   */\n  getPorts(full = true) {\n    const portsArray = [];\n    for (const [port, mappings] of Object.entries(this.ports)) {\n      if (mappings) {\n        mappings.forEach((mapping) => {\n          if (full) {\n            portsArray.push(`${mapping.HostPort}/${port.split(\"/\")[1]}`);\n          } else {\n            portsArray.push(mapping.HostPort);\n          }\n        });\n      }\n    }\n    return portsArray;\n  }\n\n  /**\n   * Get labels of the container\n   *\n   * @returns {object}\n   */\n  getLabels() {\n    return this.labels;\n  }\n\n  /**\n   * Get NetworkSettings of the container\n   *\n   * @returns {object}\n   */\n  getNetworks() {\n    return this.network;\n  }\n\n  /**\n   * Is running\n   */\n  isRunning() {\n    return this.status === \"running\";\n  }\n\n  /**\n   * Actions status\n   */\n  isLoading(action) {\n    return this.loading[action];\n  }\n}\n\nexport default Container;\n"],"names":["config","_ssrRenderVNode","_createVNode","_resolveDynamicComponent","_mergeProps","_withCtx","_push","_parent","_ssrRenderClass","_ssrRenderSlot","_createBlock","_renderSlot","_createCommentVNode","containers","header"],"mappings":"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","x_google_ignoreList":[0,1,2]}